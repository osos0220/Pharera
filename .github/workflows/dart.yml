name: iOS-ipa-test01

on:
  workflow_dispatch:

jobs:
  build-ios:
    name: ðŸŽ‰ iOS v0.9
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          pod setup
        working-directory: ios

      - name: Install Flutter dependencies
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Get packages
        run: flutter pub get

      - name: Ensure podhelper.rb exists
        run: |
          mkdir -p ios/Flutter
          cat <<EOF > ios/Flutter/podhelper.rb
          # Define helper methods for Flutter iOS integration
          require 'json'

          def parse_KV_file(file, separator='=')
            if !File.exist?(file)
              return {};
            end
            File.open(file).read()
              .split("\n")
              .map{|line| line.strip}
              .reject{|line| line.start_with?("#")}
              .map{|line| line.split(separator)}
              .reject{|kv| kv.length != 2}
              .map{|kv| kv.map{|s| s.strip}}
              .to_h
          end

          def flutter_root(f)
            while !File.exist?("#{f}/.flutter")
              parent = File.dirname(f)
              if parent == f
                raise "Unable to find Flutter root at #{f}"
              end
              f = parent
            end
            f
          end

          def flutter_ios_podfile_setup(iOSDir)
            framework_dir = File.join(flutter_root(iOSDir), '.ios', 'Flutter')
            app_framework_dir = File.join(framework_dir, 'engine', 'Flutter.framework')
            unless File.exist?(app_framework_dir)
              raise "#{app_framework_dir} must exist. Make sure \"flutter build ios\" is run."
            end

            engine_dir = File.join(flutter_root(iOSDir), 'bin', 'cache', 'artifacts', 'engine')
            unless File.exist?(engine_dir)
              raise "#{engine_dir} must exist. Make sure \"flutter build ios\" is run."
            end

            ENV['FLUTTER_APPLICATION_PATH'] = iOSDir
            ENV['FLUTTER_ROOT'] = flutter_root(iOSDir)
            system('pod', 'deintegrate')
            system('pod', 'install')
          end

          def flutter_install_all_ios_pods(iOSDir)
            framework_dir = File.join(flutter_root(iOSDir), '.ios', 'Flutter')
            engine_dir = File.join(flutter_root(iOSDir), 'bin', 'cache', 'artifacts', 'engine')
            if !File.exist?(File.join(framework_dir, 'engine', 'Flutter.framework'))
              raise "Invalid flutter framework directory."
            end
            if !File.exist?(engine_dir)
              raise "Invalid flutter engine directory."
            end

            pod 'Flutter', :path => File.join(framework_dir, 'engine')
            pod 'FlutterPluginRegistrant', :path => 
